<!doctype html>
<!--
In diesem Beispiel wird ein Würfel geladen, welcher translatiert, rotiert und texturiert wird. Die Beleuchtung wird dabei mit einer Licht-Textur, welche vorbrechnet wurde, simuliert.
-->
<head> 
<meta charset=utf-8> 
 
<title>WebGL Praktikum - Beispiel 16 - Multitexturierung</title> 
 
<script type="text/javascript" src="js/glMatrix.js"></script>

<!-- 
Ein Fragment Shader, welcher für jedes Fragment die Farbe setzt. Dabei wird die Diffuse-Textur mit der Licht-Textur gemischt. Der Licht-Textur wird ein fester Wert addiert, um eine ambiente Beleuchtung zu simulieren.
-->
<script id="shader-fs" type="x-shader/x-fragment"> 
    #ifdef GL_ES
    precision highp float;
    #endif

	varying vec2 vTextureCoord; 
    uniform sampler2D uSamplerDiffuse;
    uniform sampler2D uSamplerLight;
 
    void main(void) {
        vec4 textureColor = texture2D(uSamplerDiffuse, vec2(vTextureCoord.s, vTextureCoord.t));
        vec4 lightColor = texture2D(uSamplerLight, vec2(vTextureCoord.s, vTextureCoord.t));
        gl_FragColor = vec4(textureColor.rgb * (lightColor.rgb + 0.25), textureColor.a);
    }
</script> 
 
<!-- 
Ein Vertex Shader, welcher jede Vertexposition mit der Model- und Projection-Matrix transformiert und in die gl_Position schreibt und die transformierte Position und Texturkoordinate, als Varyings an den Fragment Shader weiterreicht. 
-->
<script id="shader-vs" type="x-shader/x-vertex"> 
    attribute vec3 aVertexPosition;
    attribute vec2 aTextureCoord;

	uniform mat4 uMMatrix;
	uniform mat4 uPMatrix;

	varying vec2 vTextureCoord;
    varying vec4 vPosition;

    void main(void) {
        vPosition = uMMatrix * vec4(aVertexPosition, 1.0);
        gl_Position = uPMatrix * vPosition;
        vTextureCoord = aTextureCoord;
    }
</script> 
 
 
<script type="text/javascript"> 
 
    var gl;

	//WebGL Context aus Canvas ermitteln
    function initGL(canvas) {
        try {
            gl = canvas.getContext("experimental-webgl");
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }
 
	 //Vertex und Fragment Shader laden
    function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }
 
        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }
 
        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }
 
        gl.shaderSource(shader, str);
        gl.compileShader(shader);
 
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }
 
        return shader;
    }
 
 
    var shaderProgram;
 
	//Shaderprogramm festlegen
    function initShaders() {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");
 
        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);
 
        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }
 
        gl.useProgram(shaderProgram);
 
		//Attribut für die Vertexposition
        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

		//Attribut für die Texturkoordinate
        shaderProgram.textureCoordAttribute = gl.getAttribLocation(shaderProgram, "aTextureCoord");
        gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);

	    //Uniform für die Projection-Matrix
        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");

	    //Uniform für die Model-Matrix
        shaderProgram.mMatrixUniform = gl.getUniformLocation(shaderProgram, "uMMatrix");

        //Uniform für die Diffuse Textur
        shaderProgram.samplerDiffuseUniform = gl.getUniformLocation(shaderProgram, "uSamplerDiffuse");

        //Uniform für die Light Textur
        shaderProgram.samplerLightUniform = gl.getUniformLocation(shaderProgram, "uSamplerLight");

    }


    //Textur einrichten
    function handleLoadedTexture(texture) {
        //Textur binden
        gl.bindTexture(gl.TEXTURE_2D, texture);
        
        //Texturkoordinaten um die Y Achse spiegeln
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
        
        //Image Inhalt in Textur speichern
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);
        
        //Filter einrichten: hier LINEAR
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        
        //Textur entbinden
        gl.bindTexture(gl.TEXTURE_2D, null);
    }

    var diffuseTexture;
    var lightTexture;
 
    //Laden der Texturen
    function initTextures() {
        diffuseTexture = gl.createTexture();
        diffuseTexture.image = new Image();
        diffuseTexture.image.onload = function () {
            handleLoadedTexture(diffuseTexture)
        }
        diffuseTexture.image.src = "./data/basemap.gif";

        lightTexture = gl.createTexture();
        lightTexture.image = new Image();
        lightTexture.image.onload = function () {
            handleLoadedTexture(lightTexture)
        }
        lightTexture.image.src = "./data/lightmap.gif";
    }


	//Model-Matrix
    var mMatrix = mat4.create();
	//Projection-Matrix
    var pMatrix = mat4.create();
 
	//Bindet die Matrizen an das Shaderprogramm
    function setMatrixUniforms() {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mMatrixUniform, false, mMatrix);
    }
 
    var modelVertexPositionBuffer;
    var modelVertexColorBuffer;
 
	//Alle verwendeten VertexBuffer der Szene werden hier initialisiert
    function initBuffers() {      

	    //VertexBuffer für einen dreidimensionalen Würfel
        modelVertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, modelVertexPositionBuffer);
        vertices = [
            // Front face
            -1.0, -1.0,  1.0,
             1.0, -1.0,  1.0,
             1.0,  1.0,  1.0,
            -1.0,  1.0,  1.0,

            // Back face
            -1.0, -1.0, -1.0,
            -1.0,  1.0, -1.0,
             1.0,  1.0, -1.0,
             1.0, -1.0, -1.0,

            // Top face
            -1.0,  1.0, -1.0,
            -1.0,  1.0,  1.0,
             1.0,  1.0,  1.0,
             1.0,  1.0, -1.0,

            // Bottom face
            -1.0, -1.0, -1.0,
             1.0, -1.0, -1.0,
             1.0, -1.0,  1.0,
            -1.0, -1.0,  1.0,

            // Right face
             1.0, -1.0, -1.0,
             1.0,  1.0, -1.0,
             1.0,  1.0,  1.0,
             1.0, -1.0,  1.0,

            // Left face
            -1.0, -1.0, -1.0,
            -1.0, -1.0,  1.0,
            -1.0,  1.0,  1.0,
            -1.0,  1.0, -1.0
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        modelVertexPositionBuffer.itemSize = 3;
        modelVertexPositionBuffer.numItems = 24;

        //VertexBuffer für die Texturkoordinaten des Würfels
        modelVertexTextureCoordBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, modelVertexTextureCoordBuffer);
        var textureCoords = [
          // Front face
          0.0, 0.0,
          1.0, 0.0,
          1.0, 1.0,
          0.0, 1.0,

          // Back face
          1.0, 0.0,
          1.0, 1.0,
          0.0, 1.0,
          0.0, 0.0,

          // Top face
          0.0, 1.0,
          0.0, 0.0,
          1.0, 0.0,
          1.0, 1.0,

          // Bottom face
          1.0, 1.0,
          0.0, 1.0,
          0.0, 0.0,
          1.0, 0.0,

          // Right face
          1.0, 0.0,
          1.0, 1.0,
          0.0, 1.0,
          0.0, 0.0,

          // Left face
          0.0, 0.0,
          1.0, 0.0,
          1.0, 1.0,
          0.0, 1.0,
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
        modelVertexTextureCoordBuffer.itemSize = 2;
        modelVertexTextureCoordBuffer.numItems = 24;
  
        modelVertexIndexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, modelVertexIndexBuffer);
        var modelVertexIndices = [
            0, 1, 2,      0, 2, 3,    // Front face
            4, 5, 6,      4, 6, 7,    // Back face
            8, 9, 10,     8, 10, 11,  // Top face
            12, 13, 14,   12, 14, 15, // Bottom face
            16, 17, 18,   16, 18, 19, // Right face
            20, 21, 22,   20, 22, 23  // Left face
        ];
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(modelVertexIndices), gl.STATIC_DRAW);
        modelVertexIndexBuffer.itemSize = 1;
        modelVertexIndexBuffer.numItems = 36;
    }


	//Szene wird hier gezeichnet	
    function drawScene() {
        gl.clearColor(0.9, 0.9, 0.9, 1.0);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

	    //Perspective wird gesetzt und in die Projection-Matrix geschrieben
	    mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);

	    //Model-Matrix in jedem Frame zurücksetzen
	    mat4.identity(mMatrix);

	    //Model in der Z Achse verschieben, damit es sichtbar ist
	    mat4.translate(mMatrix, [0.0, 0.0, -5.0]);

	    //Rotiere um die X und Y Achse
	    mat4.rotate(mMatrix, degToRad(xRot), [1, 0, 0]);
	    mat4.rotate(mMatrix, degToRad(yRot), [0, 1, 0]);

	    //Buffer für die Vertexpositiones des Würfel wird gebunden
        gl.bindBuffer(gl.ARRAY_BUFFER, modelVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute,modelVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

        //Buffer der Texturkoordinaten wird gebunden
        gl.bindBuffer(gl.ARRAY_BUFFER, modelVertexTextureCoordBuffer);
        gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, modelVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);

        //Textur aktivieren und die Diffuse-Textur binden
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, diffuseTexture);
        gl.uniform1i(shaderProgram.samplerDiffuseUniform, 0);

        //Textur aktivieren und die Licht-Textur binden
        gl.activeTexture(gl.TEXTURE1);
        gl.bindTexture(gl.TEXTURE_2D, lightTexture);
        gl.uniform1i(shaderProgram.samplerLightUniform, 1);

        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, modelVertexIndexBuffer);

	    //Sendet die aktuellen Matrizen an das Shaderprogramm
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, modelVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);

    }

    var lastTime = 0;
    var xRot = 0;
    var yRot = 0; 

    //Animiert Objekte indem einige Variablen hochgezählt werden
    function animate() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
            // Zeit zwischen einem Frame
	    var deltaTime = timeNow - lastTime;
 
            xRot += (deltaTime) / 100.0;
            yRot += (deltaTime) / 100.0;
        }
        lastTime = timeNow;
    }
 
 
 	//Main Methode
    function main() {
        var canvas = document.getElementById("canvas");
        initGL(canvas);
        initShaders();
        initBuffers();
        initTextures();
 
        //Setzt den Renderausschnitt auf den gesamten Canvas
		gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
		
        gl.clearColor(0.9, 0.9, 0.9, 1.0);
        
        //Tiefentest aktivieren
        gl.enable(gl.DEPTH_TEST);
	
        tick();
    }
 
    window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;
 
    //Erfragt bei Browser einen neuen Renderframe und zeichnet dann die Scene neu
    function tick() {
        window.requestAnimationFrame(tick);
        drawScene();
	    animate();
    }

	//Hilfsfunktion die Grad zu Radiant umwandelt
   function degToRad(degrees) {
        return degrees * Math.PI / 180;
    }

 
</script> 
 
 
</head> 
 
<!-- das Canvas Element mit einer Größe von 512x512 Pixeln -->
<body onload="main();"> 
    <canvas id="canvas" style="border: none;" width="512" height="512"></canvas>  
</body> 

</html>
