<!doctype html>
<!--
Erstellen Sie einen Vignetten Effekt mittels Post Processing. Rendern Sie die Szene aus Aufgabe 11 in einen Framebuffer. Nutzen Sie die Textur des Framebuffers als Eingabe.
-->
<head> 
<meta charset=utf-8> 

<title>WebGL Praktikum - Aufgabe 12 - Post-Processing</title> 
 
<script type="text/javascript" src="js/glMatrix.js"></script> 
 
<!-- 
Ein Fragment Shader welcher für jedes Fragment die Farbe der übergebenen Textur setzt. Er errechnet dafür mit dem übergebenen Varyings den diffusen Einfluss des Punktlichtes indem er den Winkel zwischen Normale und Lichtrichtung bestimmt. Für die Berechnung des spekularen Einfluss wird vorerst der Halbvektor, welcher zwischen dem Augrichtungsvektor und Lichtrichtungsvektor liegt berechnet. Mit dem Winkel zwischen Halbvektor und Normale wird schließlich der spekulare Anteil berechnet. Zusätzlich addiert er eine Ambiente-Lichtfarbe um nicht beleuchtete Stellen auszufüllen.
-->
<script id="shader-fs" type="x-shader/x-fragment"> 
    #ifdef GL_ES
    precision highp float;
    #endif

	varying vec2 vTextureCoord;
    varying vec3 vTransformedNormal;
    varying vec4 vPosition;

    uniform vec3 uLightingPosition;
    uniform vec3 uLightingDiffuseColor;
    uniform vec3 uLightingSpecularColor;
    uniform vec3 uLightingAmbientColor;

    uniform float uShininess;
 
    uniform sampler2D uSampler;
 
    void main(void) {
        vec3 eyeDirection = normalize(-vPosition.xyz);
        vec3 lightDirection = normalize(uLightingPosition - vPosition.xyz);
        float diffuseLightWeighting = max(dot(normalize(vTransformedNormal), lightDirection), 0.0);

        vec3 halfEyeLight = normalize(eyeDirection + lightDirection);
        float specularLightWeighting = pow(max(dot(normalize(vTransformedNormal),halfEyeLight),0.0),uShininess);

        vec3 lightWeighting = uLightingAmbientColor
                + (uLightingDiffuseColor * diffuseLightWeighting) 
                + (uLightingSpecularColor * specularLightWeighting);

        vec4 textureColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
        gl_FragColor = vec4(textureColor.rgb * lightWeighting, textureColor.a);
    }
</script> 

<!-- 
Ein Vertex Shader welcher jede Vertexposition mit der Model- und Projection-Matrix transformiert und in die gl_Position schreibt und die transformierte Position, Normale und Texturkoordinate, als Varyings an den Fragment Shader weiterreicht. 
-->
<script id="shader-vs" type="x-shader/x-vertex"> 
    attribute vec3 aVertexPosition;
    attribute vec3 aVertexNormal;
    attribute vec2 aTextureCoord;

	uniform mat4 uMMatrix;
	uniform mat4 uPMatrix;
    uniform mat3 uNMatrix;

	varying vec2 vTextureCoord;
    varying vec3 vTransformedNormal;
    varying vec4 vPosition;

    void main(void) {
        vPosition = uMMatrix * vec4(aVertexPosition, 1.0);
        gl_Position = uPMatrix * vPosition;
        vTextureCoord = aTextureCoord;
        vTransformedNormal = uNMatrix * aVertexNormal;
    }
</script> 

<!-- 
Ein Fragment Shader welcher aus der übergebenen Textur jeweils die um die Texturkoordinate liegenden Werte ermittelt und anschließend aus diesen Werten einen Mittelwert bildet. 
-->
<script id="blur-shader-fs" type="x-shader/x-fragment"> 
    #ifdef GL_ES
    precision highp float;
    #endif

    uniform sampler2D uSampler;
    varying vec2 vTextureCoord;
        
    float size = 0.5;
    float amount = 0.6;
    void main() {
        vec4 color = texture2D(uSampler, vTextureCoord);
        
        //Abstand von der Texturkoordinate zum Mittelpunkt
        float dist = distance(vTextureCoord, vec2(0.5, 0.5));
        
        //Interpoliere den Abstandswert+Größe+Deckkraft in den Bereich [1.0-Größe]
        color.rgb *= smoothstep(1.0, size, dist * (amount + size));
        
        gl_FragColor = color;
    }
</script> 

<!-- 
Ein Vertex Shader welcher jede Vertexposition in die gl_Position schreibt und die Vertex Farbe als Varying an den Fragment Shader weiterreicht
-->
<script id="blur-shader-vs" type="x-shader/x-vertex"> 
    attribute vec3 aVertexPosition;
    attribute vec2 aTextureCoord;

    varying vec2 vTextureCoord;

    void main(void) {
       vTextureCoord = aTextureCoord;
       gl_Position = vec4( aVertexPosition, 1.0 );       
    }
</script> 
 
 
<script type="text/javascript"> 
 
    var gl;

	//WebGL Context aus Canvas ermitteln
    function initGL(canvas) {
        try {
            gl = canvas.getContext("experimental-webgl");
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }
 
	 //Vertex und Fragment Shader laden
    function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }
 
        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }
 
        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }
 
        gl.shaderSource(shader, str);
        gl.compileShader(shader);
 
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }
 
        return shader;
    }
 
 
    var shaderProgram;
 
	//Shaderprogramm festlegen
    function initShaders() {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");
 
        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);
 
        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }
 
        gl.useProgram(shaderProgram);
 
		//Attribut für die Vertexposition
        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

        //Attribut für die Vertexnormale
        shaderProgram.vertexNormalAttribute = gl.getAttribLocation(shaderProgram, "aVertexNormal");
        gl.enableVertexAttribArray(shaderProgram.vertexNormalAttribute);

		//Attribut für die Texturkoordinate
        shaderProgram.textureCoordAttribute = gl.getAttribLocation(shaderProgram, "aTextureCoord");
        gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);

	    //Uniform für die Projection-Matrix
        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");

	    //Uniform für die Model-Matrix
        shaderProgram.mMatrixUniform = gl.getUniformLocation(shaderProgram, "uMMatrix");

	    //Uniform für die Normalen-Matrix
        shaderProgram.nMatrixUniform = gl.getUniformLocation(shaderProgram, "uNMatrix");

        //Uniform für die Textur
        shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, "uSampler");

        //Uniform für die Position des Lichtes
        shaderProgram.lightingPositionUniform = gl.getUniformLocation(shaderProgram, "uLightingPosition");

        //Uniform für den diffusen Anteil des Lichtes
        shaderProgram.lightingDiffuseColorUniform = gl.getUniformLocation(shaderProgram, "uLightingDiffuseColor");

        //Uniform für den ambienten Anteil des Lichtes
        shaderProgram.lightingAmbientColorUniform = gl.getUniformLocation(shaderProgram, "uLightingAmbientColor");

        //Uniform für den spekularen Anteil des Lichtes
        shaderProgram.lightingSpecularColorUniform = gl.getUniformLocation(shaderProgram, "uLightingSpecularColor");

        //Uniform für die shinines des Lichtes
        shaderProgram.lightingShininessUniform = gl.getUniformLocation(shaderProgram, "uShininess");


        //Post-Processing Shader
        var blurFragmentShader = getShader(gl, "blur-shader-fs");
        var blurVertexShader = getShader(gl, "blur-shader-vs");
 
        blurShaderProgram = gl.createProgram();
        gl.attachShader(blurShaderProgram, blurVertexShader);
        gl.attachShader(blurShaderProgram, blurFragmentShader);
        gl.linkProgram(blurShaderProgram);
 
        if (!gl.getProgramParameter(blurShaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }
 
        gl.useProgram(blurShaderProgram);
 
		//Attribut für die Vertexposition
        blurShaderProgram.vertexPositionAttribute = gl.getAttribLocation(blurShaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(blurShaderProgram.vertexPositionAttribute);

		//Attribut für die Texturkoordinate
        blurShaderProgram.textureCoordAttribute = gl.getAttribLocation(blurShaderProgram, "aTextureCoord");
        gl.enableVertexAttribArray(blurShaderProgram.textureCoordAttribute);

        //Uniform für die Textur
        shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, "uSampler");
    }


    var rttFramebuffer;
    var rttTexture;

    //Framebuffer einrichten
    function initFramebuffer() {
    
        //Framebuffer in der Größe 512x512 erstellen und binden
        rttFramebuffer = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, rttFramebuffer);
        rttFramebuffer.width = 512;
        rttFramebuffer.height = 512;

        //Textur für die Farbinformation des FrameBuffers erstellen
        rttTexture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, rttTexture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);

        //leere Textur erstellen
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, rttFramebuffer.width, rttFramebuffer.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);

        //Renderbuffer für die Tiefeninformationen des Framebuffers
        var renderbuffer = gl.createRenderbuffer();
        gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, rttFramebuffer.width, rttFramebuffer.height);

        //Textur und Renderbuffer an Framebuffer binden
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, rttTexture, 0);
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);

        //cleanup
        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.bindRenderbuffer(gl.RENDERBUFFER, null);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    }
    
    //Texture einrichten
    function handleLoadedTexture(texture) {
        //Textur binden
        gl.bindTexture(gl.TEXTURE_2D, texture);
        
        //Texturkoordinaten um die Y Achse spiegeln
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
        
        //Image Inhalt in Textur speichern
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);
        
        //Filter einrichten: hier LINEAR
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        
        //Textur entbinden
        gl.bindTexture(gl.TEXTURE_2D, null);
    }

    var myTexture;
 
    //Laden der Texture
    function initTexture() {
        myTexture = gl.createTexture();
        myTexture.image = new Image();
        myTexture.image.onload = function () {
            handleLoadedTexture(myTexture)
        }
        myTexture.image.src = "./data/stonewall.jpg";
    }


	//Model-Matrix
    var mMatrix = mat4.create();
	//Projection-Matrix
    var pMatrix = mat4.create();
 
	//Bindet die Matrizen an das Shaderprogramm
    function setMatrixUniforms() {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mMatrixUniform, false, mMatrix);

        var normalMatrix = mat3.create();
        mat4.toInverseMat3(mMatrix, normalMatrix);
        mat3.transpose(normalMatrix);
        gl.uniformMatrix3fv(shaderProgram.nMatrixUniform, false, normalMatrix);
    }
 
    var modelVertexPositionBuffer;
    var modelVertexNormalBuffer;
    var modelVertexTextureCoordBuffer;
    var modelVertexIndexBuffer;

    //JSON Daten in VBOs binden
    function handleLoadedModel(modelData) {
        //Normalen binden
        modelVertexNormalBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, modelVertexNormalBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(modelData.vertexNormals), gl.STATIC_DRAW);
        modelVertexNormalBuffer.itemSize = 3;
        modelVertexNormalBuffer.numItems = modelData.vertexNormals.length / 3;

        //Texturkoordinaten binden
        modelVertexTextureCoordBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, modelVertexTextureCoordBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(modelData.vertexTextureCoords), gl.STATIC_DRAW);
        modelVertexTextureCoordBuffer.itemSize = 2;
        modelVertexTextureCoordBuffer.numItems = modelData.vertexTextureCoords.length / 2;

        //Vertexpositionen binden
        modelVertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, modelVertexPositionBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(modelData.vertexPositions), gl.STATIC_DRAW);
        modelVertexPositionBuffer.itemSize = 3;
        modelVertexPositionBuffer.numItems = modelData.vertexPositions.length / 3;
    
        //Index binden
        modelVertexIndexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, modelVertexIndexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(modelData.indices), gl.STATIC_DRAW);
        modelVertexIndexBuffer.itemSize = 1;
        modelVertexIndexBuffer.numItems = modelData.indices.length;
    }

    //JSON Modell laden
    function loadModel() {
        //JSON Datei über XMLHttpRequest anfordern
        var request = new XMLHttpRequest();
        request.open("GET", "data/Teapot.json");
        request.onreadystatechange = function () {
            if (request.readyState == 4) {
                handleLoadedModel(JSON.parse(request.responseText));
            }
        }
        request.send();
    }

    // VBOs für bildschirmfüllendes Rechteck definieren
    function initBuffers() {
        quadVertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, quadVertexPositionBuffer);
        vertices = [
            -1.0, -1.0, 0,
             1.0, -1.0, 0,
            -1.0,  1.0, 0,
             1.0,  1.0, 0,
            ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        quadVertexPositionBuffer.itemSize = 3;
        quadVertexPositionBuffer.numItems = 4;

        quadVertexTextureCoordBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, quadVertexTextureCoordBuffer);
        var textureCoords = [
            0.0, 0.0,
            1.0, 0.0,
            0.0, 1.0,
            1.0, 1.0,
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
        quadVertexTextureCoordBuffer.itemSize = 2;
        quadVertexTextureCoordBuffer.numItems = 4;
    }


	//Scene wird hier gezeichnet	
    function drawScene() {
        
        gl.useProgram(shaderProgram);
       
        //FrameBuffer binden, ab jetzt wird die Szene in diesen Buffer gerendert
        gl.bindFramebuffer(gl.FRAMEBUFFER, rttFramebuffer);

        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        if (modelVertexPositionBuffer == null || modelVertexNormalBuffer == null || modelVertexTextureCoordBuffer == null || modelVertexIndexBuffer == null) {
            return;
        }

	    //Perspective wird gesetzt und in die Porjectionsmatrix geschrieben
	    mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);

	    //Modelmatrix in jedem Frame zurücksetzen
	    mat4.identity(mMatrix);

	    //Model in der Z Achse verschieben damit es sichtbar ist
	    mat4.translate(mMatrix, [0.0, 0.0, -40.0]);

	    //Rotiere um die Y Achse
	    mat4.rotate(mMatrix, degToRad(xRot), [0, 1, 0]);

	    //Buffer für die Vertexpositiones des Würfel wird gebunden
        gl.bindBuffer(gl.ARRAY_BUFFER, modelVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute,modelVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

        //Buffer für die Vertexnormalen des Würfels wird gebunden
        gl.bindBuffer(gl.ARRAY_BUFFER, modelVertexNormalBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexNormalAttribute, modelVertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0);

        //Buffer der Texturkoordinaten wird gebunden
        gl.bindBuffer(gl.ARRAY_BUFFER, modelVertexTextureCoordBuffer);
        gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, modelVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);

        //Texturen aktivieren und die Texture binden
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, myTexture);
        gl.uniform1i(shaderProgram.samplerUniform, 0);
        
        //Ambiente Farbe des Lichtes setzen
        gl.uniform3f(shaderProgram.lightingAmbientColorUniform, 0.1,0.1,0.1);

        //Difusse Farbe des Lichtes setzen
        gl.uniform3f(shaderProgram.lightingDiffuseColorUniform, 0.9,0.9,1.0);

        //Speculare Farbe des Lichtes setzen
        gl.uniform3f(shaderProgram.lightingSpecularColorUniform, 0.8,0.8,0.8);

        //Shininess des Lichtes setzen        
        gl.uniform1f(shaderProgram.lightingShininessUniform, 32.0);

        //Position des Lichtes setzen        
        gl.uniform3f(shaderProgram.lightingPositionUniform, 0.0,0.0,5.0);

        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, modelVertexIndexBuffer);

	    //Sendet die aktuellen Matrizen an das Shaderprogramm
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, modelVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);


        //PostProcessing
        gl.useProgram(blurShaderProgram);
        
        //Framebuffer entbinden, ab jetzt wird wieder in den Canvas gerendert
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);

        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
        
        //Bildschirmfüllendes Rechteck binden
gl.bindBuffer(gl.ARRAY_BUFFER, quadVertexPositionBuffer);
        gl.vertexAttribPointer(blurShaderProgram.vertexPositionAttribute, quadVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, quadVertexTextureCoordBuffer);
        gl.vertexAttribPointer(blurShaderProgram.textureCoordAttribute, quadVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);
        
        //Textur des Framebuffers laden
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, rttTexture);
        gl.generateMipmap(gl.TEXTURE_2D);
        gl.uniform1i(blurShaderProgram.samplerUniform, 0);

        //Rechteck mit Framebuffertextur rendern
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, quadVertexPositionBuffer.numItems);
    }

    var lastTime = 0;
    var xRot = 0;

    //Animiert Objekte indem einige Variablen hochgezählt werden
    function animate() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
            // Zeit zwischen einem Frame
	    var deltaTime = timeNow - lastTime;
 
            xRot += (deltaTime) / 100.0;
        }
        lastTime = timeNow;
    }
 
 
 	//Main Methode
    function main() {
        var canvas = document.getElementById("canvas");
        initGL(canvas);
        initFramebuffer();
        initShaders();
        initBuffers();
        loadModel();
        initTexture();
 
        //Setzt den Renderausschnitt auf den gesamten Canvas
		gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
		
        gl.clearColor(0.9, 0.9, 0.9, 1.0);
        
        //Tiefentest aktivieren
        gl.enable(gl.DEPTH_TEST);
	
        tick();
    }
 
    window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;
 
    //Erfragt bei Browser einen neuen Renderframe und zeichnet dann die Scene neu
    function tick() {
        window.requestAnimationFrame(tick);
        drawScene();
	    animate();
    }

	//Hilfsfunktion die Grad zu Radiant umwandelt
   function degToRad(degrees) {
        return degrees * Math.PI / 180;
    }

 
</script> 
 
 
</head> 
 
<!-- das Canvas Element mit einer Größe von 512x512 Pixeln -->
<body onload="main();"> 
    <canvas id="canvas" style="border: none;" width="512" height="512"></canvas>  
</body> 

</html> 
